-- ENUM 定義
CREATE TYPE scrap_status AS ENUM ('1', '2', '3');
CREATE TYPE device_status AS ENUM ('1', '2', '3');
CREATE TYPE issue_status AS ENUM ('1', '2', '3');
CREATE TYPE user_role AS ENUM ('1', '2', '3');

-- scraps table
CREATE TABLE "scraps" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL,
	"device_id" INTEGER NOT NULL,
	"type" VARCHAR(50) NOT NULL,
	"status" scrap_status NOT NULL,
	"humidity" INTEGER NOT NULL,
	"weight" INTEGER NOT NULL,
	"volume" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE INDEX "scrap_index_0" ON "scraps" ("user_id");
CREATE INDEX "scrap_index_1" ON "scraps" ("device_id");

-- devices table
CREATE TABLE "devices" (
	"id" INTEGER PRIMARY KEY,
	"status" device_status NOT NULL,
	"name" VARCHAR(255) NOT NULL,
	"boot_time" TIMESTAMP NOT NULL,
	"ratio" DOUBLE PRECISION
);
COMMENT ON TABLE "devices" IS 'status 需要選項、Ratio是沙小她媽型別要確定';

-- users table
CREATE TABLE "users" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL,
	"password" VARCHAR(255) NOT NULL,
	"role" user_role NOT NULL,
	"mail" VARCHAR(255),
	"create_time" TIMESTAMP NOT NULL,
	PRIMARY KEY("id")
);
COMMENT ON TABLE "users" IS 'role 需要選項';

-- issues table
CREATE TABLE "issues" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"device_id" INTEGER NOT NULL,
	"description" VARCHAR(255),
	"issuer" INTEGER NOT NULL,
	"assigner" INTEGER NOT NULL,
	"status" issue_status NOT NULL,
	"create_time" TIMESTAMP NOT NULL,
	PRIMARY KEY("id")
);
COMMENT ON TABLE "issues" IS 'status 選項；create_time為發現問題的時間';

-- maintenance_records table
CREATE TABLE "maintenance_records" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"issue_id" INTEGER NOT NULL,
	"user_id" INTEGER NOT NULL,
	"description" VARCHAR(255) NOT NULL,
	"create_time" TIMESTAMP NOT NULL,
	"end_time" TIMESTAMP NOT NULL,
	PRIMARY KEY("id")
);
COMMENT ON TABLE "maintenance_records" IS 'create_time為開始解決問題的時間';

-- schedule table
CREATE TABLE "schedule" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL,
	"device_id" INTEGER,
	"title" VARCHAR(255) NOT NULL,
	"description" VARCHAR(255),
	"date" DATE NOT NULL,
	"start_time" TIMESTAMP NOT NULL,
	"end_time" TIMESTAMP NOT NULL,
	PRIMARY KEY("id")
);
COMMENT ON TABLE "schedule" IS '甚至不知道用不用的到這個表；device_id 用陣列';

-- energy_record table
CREATE TABLE "energy_record" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"device_id" INTEGER,
	"type" VARCHAR(50),
	"date" DATE,
	"consumption" DOUBLE PRECISION,
	PRIMARY KEY("id")
);
COMMENT ON TABLE "energy_record" IS '能量種類型別；是否需要多創幾個table因不同energy可能會有不同的單位';

-- carbon table
CREATE TABLE "carbon" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL,
	"Fuel_name" VARCHAR(255) NOT NULL,
	"consumption" DOUBLE PRECISION NOT NULL,
	"Electricity" DOUBLE PRECISION,
	"coefficient" DOUBLE PRECISION NOT NULL,
	PRIMARY KEY("id")
);
COMMENT ON TABLE "carbon" IS 'coefficient 要用 array 紀錄兩個係數';

-- 外鍵設定
ALTER TABLE "issues"
	ADD FOREIGN KEY("device_id") REFERENCES "devices"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "issues"
	ADD FOREIGN KEY("issuer") REFERENCES "users"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "issues"
	ADD FOREIGN KEY("assigner") REFERENCES "users"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "maintenance_records"
	ADD FOREIGN KEY("user_id") REFERENCES "users"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "maintenance_records"
	ADD FOREIGN KEY("issue_id") REFERENCES "issues"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "scraps"
	ADD FOREIGN KEY("user_id") REFERENCES "users"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "scraps"
	ADD FOREIGN KEY("device_id") REFERENCES "devices"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "energy_record"
	ADD FOREIGN KEY("device_id") REFERENCES "devices"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "carbon"
	ADD FOREIGN KEY("user_id") REFERENCES "users"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "schedule"
	ADD FOREIGN KEY("user_id") REFERENCES "users"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "schedule"
	ADD FOREIGN KEY("device_id") REFERENCES "devices"("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
